spring:
  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 10MB

  application:
    name: profile-service
  datasource:
    driver-class-name: org.postgresql.Driver
    url: ${POSTGRES_URL_PROFILE}
    username: ${POSTGRES_USER}
    password: ${POSTGRES_PASSWORD}
  jpa:
    properties:
      hibernate:
        show_sql: true
        format_sql: true
        dialect: org.hibernate.dialect.PostgreSQLDialect
    hibernate:
      ddl-auto: update
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
    consumer:
      group-id: profile-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "*"
springdoc:
  paths-to-match: /**
  packages-to-scan: com.dts.entry.profileservice.controller
  swagger-ui:
    path: /swagger-ui
    oauth:
      use-pkce-with-authorization-code-grant: true
      client-id: swagger-ui


server:
  servlet:
    context-path: /user
  port: 8081
jwt:
  signerKey: ${JWT_SECRET}
  valid-duration: 3600
  refreshable-duration: 36000
  issuer: ${JWT_ISSUER}

kafka:
  topic:
    user-creation: user-creation-topic
    reset-password: reset-password-topic
    block-user: block-user-topic
    assign-role: assign-role-topic
    unassign-role: unassign-role-topic

introspect:
  service:
    url: ${INTROSPECT_SERVICE_URL}

cloudinary:
  cloud-name: ${CLOUDINARY_CLOUD_NAME}
  api-key: ${CLOUDINARY_API_KEY}
  api-secret: ${CLOUDINARY_API_SECRET}

internal:
  secret: 1234567