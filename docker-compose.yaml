services:
  postgres:
    container_name: postgres
    build:
      context: ./docker/postgres
      dockerfile: Dockerfile
    hostname: ${POSTGRES_HOST}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - ./docker/postgres/postgresql.conf:/usr/share/postgresql/postgresql.conf
      - ./postgres_init.sql:/docker-entrypoint-initdb.d/postgres_init.sql
      - postgres:/var/lib/postgresql/data
    command: postgres -c 'config_file=/usr/share/postgresql/postgresql.conf' -c 'max_connections=500'
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    networks:
      - entry-network

  redis:
    container_name: redis-entry
    image: redis:7.4.1-alpine
    restart: always
    ports:
      - '6379:6379'
    environment:
      - SPRING_DATA_REDIS_HOST=${SPRING_DATA_REDIS_HOST}
      - SPRING_DATA_REDIS_PORT=${SPRING_DATA_REDIS_PORT}
    volumes:
      - redis:/var/lib/redis/data
    networks:
      - entry-network

  kafka:
    image: 'bitnami/kafka:3.7.0'
    container_name: kafka-entry
    hostname: ${KAFKA_SERVICE_HOST}
    ports:
      - "${KAFKA_SERVICE_PORT}:${KAFKA_SERVICE_PORT}"
      - "9093:9093"
      - "9094:9094"
    environment:
      KAFKA_CFG_NODE_ID: ${KAFKA_CFG_NODE_ID}
      KAFKA_CFG_PROCESS_ROLES: ${KAFKA_CFG_PROCESS_ROLES}
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: ${KAFKA_CFG_CONTROLLER_QUORUM_VOTERS}
      KAFKA_CFG_LISTENERS: ${KAFKA_CFG_LISTENERS}
      KAFKA_CFG_ADVERTISED_LISTENERS: ${KAFKA_CFG_ADVERTISED_LISTENERS}
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: ${KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP}
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: ${KAFKA_CFG_CONTROLLER_LISTENER_NAMES}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: ${KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR}
    networks:
      - entry-network

volumes:
  postgres:
    driver: local
  redis:
    driver: local

networks:
  entry-network:
    driver: bridge